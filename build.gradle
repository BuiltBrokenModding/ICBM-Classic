import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
    id 'wtf.gofancy.fancygradle' version "${fancy_gradle_version}"
}

idea {
    module {
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

version = "${project.version_major}.${project.version_minor}.${project.version_revis}"
archivesBaseName = "ICBM-classic-${project.minecraft_version}"

def final isCI = System.getenv("GITHUB_ACTION")
def final ref = System.getenv("GITHUB_PR_NUMBER")
if(isCI) {
    version = version + "-CI" + (ref ? "-${ref}" : "")
}

println('[BUILD]: Project Version: ' + version)
println('[BUILD]: Java: ' + System.getProperty('java.version'))
println('[BUILD]: JVM: ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ')')
println('[BUILD]: Arch: ' + System.getProperty('os.arch'))

minecraft {
    // mappings channel: 'stable', version: '39-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'

    accessTransformer = file('src/main/resources/META-INF/ICBMClassic_at.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${project.minecraft_version}-${project.forge_version}"

    //Mods
    implementation files('libs/industrialcraft-2-2.8.170-ex112-api.jar')
    implementation files('libs/NBT-Exporter-1.0-forgelib.jar')

    // Test frameworks
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    //Junit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation files('libs/MinecraftJUnit-1.4.0-deobf.jar') //TODO use forge gradle to deobf for me testImplementation fg.deobf('whateveridc:MinecraftJUnit:1.4.0')
    //TODO example  runtimeOnly(fg.deobf(group = "mezz.jei", name = "jei-1.16.5", version = "7.7.1.121"))

    //Resource injector
    // https://hosuaby.github.io/inject-resources/0.3.2/asciidoc/#inject-resources-junit-jupiter
    // https://github.com/hosuaby/inject-resources
    testImplementation 'io.hosuaby:inject-resources-junit-jupiter:0.3.2'

    //Mockito
    testImplementation 'org.mockito:mockito-inline:4.3.1'
    testImplementation 'org.mockito:mockito-core:4.3.1'

}


task filterTokens(type: Sync) {
    duplicatesStrategy = 'include'

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version

    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [VERSION: version.toString()])
    into "$buildDir/sources"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
/*compileJava {
    source = filterTokens.outputs
}*/

fancyGradle {
    patches {
        resources
        coremods
        asm
        mergetool
    }
}

processJarTask(jar)

// Create deobf dev jars
if (isCI || project.build_deobfJar.toBoolean()) {
    tasks.register('deobfJar', Jar) {
        archiveClassifier.set 'deobf'
        from sourceSets.main.output
    }
    processJarTask(deobfJar)
}
// Create source jar
if (isCI || project.build_sourceJar.toBoolean()) {
    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set 'sources'
        from sourceSets.main.allJava
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/api/java']
        }

        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
    main.output.setResourcesDir(main.java.classesDirectory)
}

processResources {
    // required to allow file expansion later
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft_version
    }
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    //Borrow from darkhax, thank you
    // minify json data
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0

        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {

            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }

        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

test {
    useJUnitPlatform()

    maxHeapSize = '1G'
    failFast = false
    workingDir = './run/tests'
    mkdir './run/tests'

    forkEvery = 1
}

/**
 * Applies required processing to jar tasks
 * @param task the task to process
 */
private void processJarTask(task) {
    task.configure {
        manifest {
            def attribute_map = [
                "Built-By": System.properties['user.name'],
                "Created-By": "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                'Implementation-Commit': 'git rev-parse HEAD'.execute().text.trim(),
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLAT": "ICBMClassic_at.cfg"
            ]
            attributes(attribute_map)
        }
        // exclude all files in src/api from being shipped in the jar
        // this prevents crashes in obfuscated environments
        // file('src/api/').eachDirRecurse { dir ->
        //     exclude dir.name
        // }
    }
}


task installLocalGitHook(type: Copy){
    from new File(rootProject.rootDir, 'scripts/commit-msg')
    into { new File(rootProject.rootDir, '.git/hooks')}
    fileMode 0775
}

build.dependsOn installLocalGitHook